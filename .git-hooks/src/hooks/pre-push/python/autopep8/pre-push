#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

function echo() {
	Red='\033[1;31m'
	Green='\033[1;32m'
	Yellow='\033[1;33m'
	NC='\033[0m'
	printf "${!1}${2} ${NC}\n"
}

echo "Green" "---------------------------"
echo "Green" "Running pre-push analyzer!"
echo "Green" "---------------------------"

# Code formatter
echo "Yellow" "\n1. Running code-formatter..."
if ! [ -x "$(command -v autopep8)" ]; then
  echo "Red" "Code formatter: autopep8 not found!";
  exit 1;
else
  autopep8 -ir .
  echo "Green" "Autopep8 run successful!";
fi

# Running tests
echo "Yellow" "\n2. Running tests..."
python coverage.py
if [ "$?" -ne "0" ]; then
  echo "Red" "Tests failed!";
  exit 1;
else
  echo "Green" "Tests run successful!";
fi

# Uncommitted changes check
echo "Yellow" "\n3. Checking uncommitted changes..."
if [[ "$(git status --porcelain)" ]]; then
  echo "Red" "Uncommitted files count: $(git status --porcelain | wc -l)";
  echo "Red" "There are uncommitted changes. Please commit your changes first.";
  exit 1;
else
  echo "Green" "No uncommitted changes found. Pushing the code...";
fi
